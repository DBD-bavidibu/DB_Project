<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="db.project.mvc.mapper.StoreMapper">
    <insert id="insertStore" parameterType="db.project.mvc.domain.StoreVO">
        insert into
        STORES (CITY_CODE, STORE_NAME, CATEGORY, ADDRESS, LATITUDE, LONGITUDE,VIEWS,CREATED_DATE)
        VALUES (DEFAULT ,#{city_code},#{store_name},#{category},#{address},#{latitude},#{longitude},0,now())
    </insert>

    <select id="storeList" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date , earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id = 1
        order by views desc limit 10
    </select>

    <select id="storeDetail" parameterType="int" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date , earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance,likes_num
        from storeinfo s, users u
        where store_id=#{storeID} and user_id =#{userID}
    </select>

    <update id="updateStoreViews" parameterType="int">
        update stores set views=views+1 where store_id=#{storeID}
    </update>


    <select id="storeList_UserLike" parameterType="int" resultType="db.project.mvc.domain.StoreVO">
        select * from likes join stores on likes.store_id = stores.store_id
        where likes.user_id = #{userID}
    </select>

    <select id="getUser" parameterType="int" resultType="db.project.mvc.domain.UserVO">
        select * from Users where user_id = #{userID}
    </select>

    <select id="storeList_HomeDistance" parameterType="int" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date , earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id = #{userID} and earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) &lt; #{distance}
        order by views desc limit 10
    </select>

    <select id="storeList_HomeDistanceWithCategory" parameterType="map" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date , earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance,likes_num
        from storeinfo s, users u
        where earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) &lt; #{distance}
        and u.user_id = #{userID}  and s.category= #{category}
        order by views desc limit 10
    </select>

    <select id="storeList_HomeDistanceWithKeyword" parameterType="map" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date, earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id = #{userID} and earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) &lt; #{distance}
        and (s.category like '%${keyword}%' or s.store_name like '%${keyword}%' or s.address like '%${keyword}%')
        order by views desc limit 10
    </select>

    <select id="storeList_City" parameterType="int" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date, earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id =#{userID} and city_code=#{city_code}
        order by views desc limit 10
    </select>

    <select id="storeList_CityWithCategory" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date, earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance , likes_num
        from storeinfo s, users u
        where u.user_id = #{userID} and city_code=#{city_code} and category=#{category}
        order by views desc limit 10
    </select>

    <select id="storeList_CityWithKeyword" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date, earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id=#{userID} and city_code=#{city_code} and (category like '%${keyword}%' or store_name like '%${keyword}%' or address like '%${keyword}%')
        order by views desc limit 10
    </select>

    <select id="TopTenViewsStoreList" parameterType="int" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date, earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id=#{userID} and earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude))&lt; 5000
        order by views desc limit 10
    </select>

    <select id="TopTenLikesStoreList" parameterType="int" resultType="db.project.mvc.domain.StoreVO">
        select s.store_id,s.city_code,s.store_name,s.category,s.address,s.latitude,s.longitude,s.views,s.created_date, earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude)) as distance, likes_num
        from storeinfo s, users u
        where u.user_id=#{userID} and earth_distance(ll_to_earth(s.latitude,s.longitude),ll_to_earth(u.latitude,u.longitude))&lt; 5000
        order by likes_num desc limit 10
    </select>

    <select id="isLiked" parameterType="int" resultType="boolean">
        select EXISTS (select * from likes where user_id=#{userID} and store_id=#{storeID}) as isExisted;
    </select>

    <insert id="insertLike" parameterType="int">
        insert into
        LIKES (like_ID,user_ID,store_ID)
        VALUES(DEFAULT ,#{userID},#{storeID})
    </insert>

    <delete id="deleteLike" parameterType="int">
        delete from likes where store_id=#{storeID} and user_id=#{userID}
    </delete>

    <select id="getCityList" resultType="db.project.mvc.domain.CityVO">
        select distinct * from cities;
    </select>

    <select id="getCategoryList" resultType="String">
        select distinct category from stores;
    </select>

    <select id="loginUser" parameterType="String" resultType="boolean">
        select EXISTS (select * from users where email=#{email} and password=#{password}) as isExisted;
    </select>

    <insert id="createUser" parameterType="db.project.mvc.domain.UserVO">
        insert into users(USER_ID,USER_NAME,EMAIL,PASSWORD,PHONE_NUMBER,LATITUDE,LONGITUDE)
        values(DEFAULT,#{user_name},#{email},#{password},#{phone_number},#{latitude},#{longitude})
    </insert>

    <update id="updateUser" parameterType="db.project.mvc.domain.UserVO">
        update users
        set username=#{user_name},
            email=#{email},
            password=#{password},
            phone_number=#{phone_number},
            latitude=#{latitude},
            longitude=#{longitude}
        where user_id=#{user_id}
    </update>

    <delete id="deleteUser" parameterType="int">
        delete from users
        where user_id=#{user_id} and password=#{password}
    </delete>

</mapper>